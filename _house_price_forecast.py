# -*- coding: utf-8 -*-
"""-House-price-forecast.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rzUYBRH6TEdiNitx7LVA_cXHRTw9ASat
"""

!pip install keras_self_attention

#import所有會用到的套件
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense,Dropout
from keras.layers import Conv1D,MaxPooling1D,ZeroPadding1D
from keras_self_attention import SeqSelfAttention
from keras.callbacks import ModelCheckpoint
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

#讀取train-v3.csv、valid-v3.csv和test-v3.csv
train=pd.read_csv("/content/drive/MyDrive/train-v3.csv")
valid=pd.read_csv("/content/drive/MyDrive/valid-v3.csv")
test=pd.read_csv("/content/drive/MyDrive/test-v3.csv")

#比較房價與房屋參數關係
corr=train.corr()
print(corr["price"].sort_values(ascending=False))
corr["price"].plot(kind="bar",color="g",alpha=0.6)
plt.ylabel("Relevance")#製作圖表
plt.yticks([0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0])
plt.xticks(rotation=65)
plt.show()#把結果繪成圖表有利於閱讀

f_train=train[["sqft_living","grade","sqft_above","sqft_living15","bathrooms","view","sqft_basement","lat","bedrooms","waterfront","floors","yr_renovated","sqft_lot","sqft_lot15","yr_built","condition","long","sale_yr"]]
x_train=f_train#讀取train data裡和房價有正相關
y_train=train["price"]#把價格單獨讀出來
f_valid=valid[["sqft_living","grade","sqft_above","sqft_living15","bathrooms","view","sqft_basement","lat","bedrooms","waterfront","floors","yr_renovated","sqft_lot","sqft_lot15","yr_built","condition","long","sale_yr"]]
x_valid=f_valid#讀取valid data裡和房價有正相關
y_valid=valid["price"]#把價格單獨讀出來
f_test=test[["sqft_living","grade","sqft_above","sqft_living15","bathrooms","view","sqft_basement","lat","bedrooms","waterfront","floors","yr_renovated","sqft_lot","sqft_lot15","yr_built","condition","long","sale_yr"]]
x_test=f_test#讀取test data裡和房價有正相關

mean,std=x_train.mean(axis=0,),x_train.std(axis=0)
x_train=(x_train-mean)/std#將資料進行標準化
x_valid=(x_valid-mean)/std#將資料進行標準化
x_test=(x_test-mean)/std#將資料進行標準化

model= Sequential()#建立模型
model.add(Dense(512,input_dim=x_train.shape[1],kernel_initializer='normal',activation='relu'))#建立輸入層並將輸入維度設置維512
#model.add(Dense(1500,kernel_initializer='normal',activation='relu'))
model.add(Dropout(0.25))#為預防過擬合放棄1/4資料
model.add(Dense(256,kernel_initializer='normal',activation='relu'))#設立256維度的隱藏層
model.add(Dense(128,kernel_initializer='normal',activation='relu'))#設立128維度的隱藏層
model.add(Dense(64,kernel_initializer='normal',activation='relu'))#設立64維度的隱藏層
model.add(Dense(32,kernel_initializer='normal',activation='linear'))#設立32維度的隱藏層
model.add(Dense(1,kernel_initializer='normal'))#建立輸出層
model.compile(loss='MAE',optimizer='adam')#定義輸出方式
model.summary()#看Model每層狀況:

train_history=model.fit(x_train,y_train,validation_data=(x_valid,y_valid),epochs=300,batch_size=150,verbose=1)#開始訓練程式碼

x_predict=model.predict(x_test)#預測出房價
print(x_predict)

with open("test.csv","w") as f:#把預測結果存在CSV黨
  f.write("id,price\n")
  for i in range(len(x_predict)):
    f.write(str(i+1)+","+str(float(x_predict[i]))+"\n")

def show_train_history(train_history,train,validation):#劃出loss圖形，確定有沒有過擬合
  plt.plot(train_history.history[train])
  plt.plot(train_history.history[validation])
  plt.title('train history')
  plt.ylabel(train)
  plt.xlabel('Epoch')
  plt.legend(['train','validation'],loc='upper left')
  plt.show

show_train_history(train_history,'loss','val_loss')#劃出loss圖形，確定有沒有過擬合

